@page "/"
@inject ISnackbar Snackbar
<style>
    .drag-drop-zone {
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all .4s;
        min-height: 150px;
    }

    .drag-drop-input {
        position: absolute;
        width: 100%;
        height: 90%;
        opacity: 0;
        cursor: pointer;
        z-index: 2;
    }
    .drag-drop-input-disabled {
        position: absolute;
        display:none;
    }

    .drag-enter {
        box-shadow: var(--mud-elevation-10);
    }

    .list {
        padding: 2em;
        min-width: 100%;
    }
</style>

<div class="row">
    @if (isLoading || listresultweather == null)
    {
        <div class="col-md-12">
            <MudProgressLinear Class="mt-3 mb-3" Indeterminate Color="Color.Primary" Size="Size.Small" />
        </div>
    }

    <div class="col-md-12 p-4">
        <MudPaper Style="@(isLoading || (listresultweather != null && listresultweather.Count > 0) ? "display:none" : "")" Elevation="25" @ondragenter="@(()=>_dragEnterStyle="drag-enter")"
                  @ondragleave="@(()=>_dragEnterStyle=null)"
                  @ondragend="@(()=>_dragEnterStyle=null)"
                  Class=@("drag-drop-zone "+ _dragEnterStyle)>

            <InputFile OnChange="OnInputFileChanged" class="@(isLoading ? "drag-drop-input-disabled" : "drag-drop-input")" />
            <MudText Typo="Typo.subtitle1" Class="font-rio">Drag and drop the CSV file here or click to browse</MudText>
        </MudPaper>
    </div>

    <div class="col-md-12">
        @if (listresultweather != null && listresultweather.Count > 0)
        {
            <MudCarousel Class="mud-width-full" Style="height:90vh;overflow:scroll" ShowArrows AutoCycle="false" ShowBullets="false" TData="object">
                @foreach (var i in listresultweather)
                {
                    <MudCarouselItem Class="pl-5 pr-5" Transition="Transition.Slide">
                        <MudPaper Elevation="25" Class="p-3 ml-5 mr-5">
                            <MudText Color="Color.Primary" Class="font-rio" Typo="Typo.h5">@i.name</MudText>
                            <MudText Class="font-rio" Typo="Typo.subtitle1">@DateTime.Now.AddSeconds(i.timezone_offset).ToString("ddd, dd MMMM hh:mm tt")</MudText>
                            <MudText Color="Color.Primary" Class="font-rio" Typo="Typo.h2">@Math.Round(i.current.temp, 0) °C</MudText>
                            <MudDivider Class="mt-3 mb-3" />
                            @if (i.current.sunrise == 1)
                            {
                                <MudIcon Icon="@Icons.Rounded.Cloud" />
                            }
                            else if (i.current.sunset == 1)
                            {
                                <MudIcon Icon="@Icons.Rounded.WbSunny" />
                            }
                            <div class="row">
                                @foreach (var day in i.daily)
                                {
                                    <div class="col-md-1 m-auto">
                                        <MudText Color="Color.Primary" Class="font-rio">@day.dtHumanizedDay</MudText>
                                        <MudText Class="font-rio">@day.clouds °C</MudText>
                                        <MudText Class="font-rio">@day.feels_like.day°</MudText>
                                        <MudDivider Class="mt-2 mb-2"/>
                                    </div>
                                }
                            </div>
                        </MudPaper>
                    </MudCarouselItem>
                }
            </MudCarousel>
        }
    </div>
</div>
@code {
    @using System.Net.Http.Headers
    @inject HttpClient Http

    bool isLoading = false;
    public List<WeatherDailyDto> listresultweather { get; set; } = new();
    string _dragEnterStyle;
    long maxFileSize = 1024 * 1024 * 15;
    async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {

        var singleFile = e.File;
        using var content = new MultipartFormDataContent();
        var fileContent = new StreamContent(singleFile.OpenReadStream(maxFileSize));
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(singleFile.ContentType);
        content.Add(content: fileContent, name: "\"csvFile\"", fileName: singleFile.Name);

        isLoading = true;
        listresultweather = null;
        await Task.Delay(1000);
        await InvokeAsync(StateHasChanged);

        var postResult = await Http.PostAsync("https://localhost:44366/WeatherForecast", content);
        listresultweather = await postResult.Content.ReadFromJsonAsync<List<WeatherDailyDto>>();
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

}
